(defun range (x y)
  (if (> x y)
      (loop for i from x downto (1+ y)
            collect i)
      (loop for i from x to (1- y)
            collect i)))

(defun map-range (f x y)
  (mapcar f (range x y)))

(defun find-range (f x y)
  (if (> x y)
      (loop for i from x downto (1+ y)
            when (funcall f i)
            do (return i)
            finally (return nil))
      (loop for i from x upto (1- y)
            when (funcall f i) 
            do (return i)
            finally (return nil))))

(defun every-range (f x y)
  (if (> x y)
      (loop for i from x downto (1+ y)
            unless (funcall f i)
            do (return nil)
            finally (return t))
      (loop for i from x upto (1- y)
            unless (funcall f i)
            do (return nil)
            finally (return t))))

(defun reduce-range (f x y &optional init)
  (let ((res init))
  (if (> x y)
      (loop for i from x downto (1+ y)
            do (setf res (funcall f res i))
            finally (return res))
      (loop for i from x to (1- y)
            do (setf res (funcall f res i))
            finally (return res)))))

(map-range 'identity 10 1)
(find-range (lambda (n) (= (mod 35 n) 0)) 2 10)
(every-range (lambda (n) (> (mod 37 n) 0)) 2 36)
(reduce-range (lambda (v x) (cons x v)) 1 5)
(reduce-range '+ 1 5 0)
